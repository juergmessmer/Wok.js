{"version":3,"sources":["Wok.js"],"names":["JSON","Wok","config","this","pluginClass","pluginPrefix","key","pipes","plugins","debug","prototype","use","name","plugin","originalName","Error","init","element","elements","querySelectorAll","i","length","_initPlugin","pluginControls","attr","getAttribute","trim","split","input","shift","output","stage","render","apply","arguments","displayName","inputName","request","outputName","register","args","parse","join","unshift","requestImmediately","renderImmediately","className","_getPipe","pipeName","source","destinations","_getStage","inputPipeName","outputPipeName","result","bind","wok","subscribe","provide","replace","destination","push","Array","slice","call","console","window"],"mappings":"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","file":"Wok.min.js","sourcesContent":["(function(JSON) {\n\t'use strict';\n\n\tfunction Wok(config) {\n\t\tthis.config = {\n\t\t\tpluginClass: 'wok-',\n\t\t\tpluginPrefix: 'wok-'\n\t\t};\n\t\tfor(var key in config) {\n\t\t\tthis.config[key] = config[key];\n\t\t}\n\n\t\tthis.pipes = {};\n\n\t\tthis.plugins = {};\n\n\t\tthis.debug = false;\n\t}\n\n\tWok.prototype.use = function(name, plugin) {\n\t\tvar originalName = name;\n\t\tif(!plugin) {\n\t\t\tplugin = Wok.plugins[name];\n\t\t}\n\t\tif(typeof plugin === 'string') {\n\t\t\toriginalName = plugin;\n\t\t\tplugin = this.plugins[plugin];\n\t\t}\n\t\tif(!plugin) {\n\t\t\tthrow new Error('Plugin '+originalName+' not known to Wok.');\n\t\t}\n\t\tthis.plugins[name] = plugin;\n\t};\n\t\n\tWok.prototype.init = function(element) {\n\t\tfor(var name in this.plugins) {\n\t\t\tvar plugin = this.plugins[name];\n\t\t\tvar elements = element.querySelectorAll('[data-'+this.config.pluginPrefix+name+']');\n\t\t\tfor(var i=0;i<elements.length;i++) {\n\t\t\t\tthis._initPlugin(plugin, name, elements[i]);\n\t\t\t}\n\t\t}\n\t};\n\n\tWok.prototype._initPlugin = function(plugin, name, element) {\n\t\t// jshint maxstatements: false\n\t\tvar attr = (element.getAttribute('data-'+this.config.pluginPrefix+name)||'').trim().split('/');\n\t\tvar input = attr.shift();\n\t\tvar output = attr.shift();\n\n\t\tvar pluginControls;\n\t\tvar stage = {};\n\t\tif(input) {\n\t\t\tstage.input = [input, function() {\n\t\t\t\treturn pluginControls.render.apply(this, arguments);\n\t\t\t}];\n\t\t\t// Set the input function’s display name to make debugging easier\n\t\t\tstage.input[1].displayName = name+'/'+input+'/input';\n\t\t\tstage.inputName = input;\n\t\t}\n\t\tif(output) {\n\t\t\tstage.output = [output, function() {\n\t\t\t\treturn pluginControls.request.apply(this, arguments);\n\t\t\t}];\n\t\t\t// Set the output function’s display name to make debugging easier\n\t\t\tstage.output[1].displayName = name+'/'+output+'/output';\n\t\t\tstage.outputName = output;\n\t\t}\n\n\t\tstage = this.register(stage);\n\t\tvar args = JSON.parse('['+attr.join('/')+']');\n\t\targs.unshift(element);\n\t\tpluginControls = plugin.apply(stage, args);\n\n\t\tif(!pluginControls) {\n\t\t\tthrow new Error('Wok plugin '+name+' did not return controls');\n\t\t}\n\n\t\tvar requestImmediately, renderImmediately;\n\t\tif(pluginControls.request === true) {\n\t\t\trequestImmediately = true;\n\t\t\tdelete pluginControls.request;\n\t\t}\n\t\tif(pluginControls.render === true) {\n\t\t\trenderImmediately = true;\n\t\t\tdelete pluginControls.render;\n\t\t}\n\n\t\t// Sanity-check pluginControls\n\t\tif(input && !('render' in pluginControls)) {\n\t\t\tthrow new Error('Wok plugin “'+name+'” not meant to be used with input pipes');\n\t\t}\n\t\tif(output && !('request' in pluginControls)) {\n\t\t\tthrow new Error('Wok plugin “'+name+'” not meant to be used with output pipes');\n\t\t}\n\n\t\tif(requestImmediately) {\n\t\t\tstage.request();\n\t\t}\n\t\tif(renderImmediately) {\n\t\t\tstage.render();\n\t\t}\n\n\t\tif(this.config.pluginClass !== null) {\n\t\t\telement.className += ' '+this.config.pluginClass+name;\n\t\t}\n\t};\n\t\n\t/**\n\t * Returns the complete defintion of a pipe\n\t */\n\tWok.prototype._getPipe = function(pipeName) {\n\t\tif(!(pipeName in this.pipes)) {\n\t\t\tthis.pipes[pipeName] = {\n\t\t\t\tsource: null,\n\t\t\t\tdestinations: []\n\t\t\t};\n\t\t}\n\t\treturn this.pipes[pipeName];\n\t};\n\n\t/**\n\t * Returns the complete defintion of a stage.\n\t */\n\tWok.prototype._getStage = function(inputPipeName, outputPipeName) {\n\t\tvar result = {};\n\t\tif(inputPipeName) {\n\t\t\tresult.request = this.request.bind(this, inputPipeName);\n\t\t}\n\t\tif(outputPipeName) {\n\t\t\tresult.render = this.render.bind(this, outputPipeName);\n\t\t}\n\t\tresult.wok = this;\n\t\treturn result;\n\t};\n\n\t/**\n\t * Registers a stage with the specified input and output pipes\n\t */\n\tWok.prototype.register = function(stage) {\n\t\tvar inputPipeName, outputPipeName;\n\t\tif('input' in stage) {\n\t\t\tinputPipeName = stage.input[0];\n\t\t\tthis.subscribe(inputPipeName, stage.input[1]);\n\t\t}\n\t\tif('output' in stage) {\n\t\t\toutputPipeName = stage.output[0];\n\t\t\tthis.provide(outputPipeName, stage.output[1]);\n\t\t}\n\t\treturn this._getStage(inputPipeName, outputPipeName);\n\t};\n\t\n\t/**\n\t * The most fundamental part of a Wok.js pipe is the provider,\n\t * the function that listens to request on a pipe (and hopefully responds with `wok.render`).\n\t * There is only one provider per pipe.\n\t * @param provider will be the function that is called whenever the configuration for this pipe changes and\n\t *                 indicates to the source that it should call `wok.render` with updated data.\n\t * @param replace If you want to call `wok.provide` multiple times for the same pipe in\n\t *                order to replace the previous provider, set the this to `true`.\n\t */\n\tWok.prototype.provide = function(pipeName, source, replace) {\n\t\tvar wok = this._getPipe(pipeName);\n\t\tif(wok.source && !replace) {\n\t\t\tthrow new Error('Cannot replace defined pipe “'+pipeName+'”’s source');\n\t\t}\n\t\twok.source = source;\n\t};\n\n\t/**\n\t * Use `wok.subscribe` to register a function that displays data.\n\t * Whenever a pipe gets rendered, the `subscriber` gets called with the updated data.\n\t * The idea is for the subscriber to either display the data or pass a modified version on to a different pipe.\n\t */\n\tWok.prototype.subscribe = function(pipeName, destination) {\n\t\tvar wok = this._getPipe(pipeName);\n\t\twok.destinations.push(destination);\n\t};\n\t\n\t/**\n\t * Renders a pipe by updating all its destinations\n\t */\n\tWok.prototype.render = function(pipeName, data) {\n\t\t// jshint unused: false\n\t\tvar wok = this._getPipe(pipeName);\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\tif(this.debug) {\n\t\t\tconsole.debug('Wok rendering '+pipeName+'', args, wok.destinations);\n\t\t}\n\t\tfor(var i=0;i<wok.destinations.length;i++) {\n\t\t\twok.destinations[i].apply(this, args);\n\t\t}\n\t};\n\n\t/**\n\t * Requests data from a pipe. Configuration options are passed along to the source\n\t */\n\tWok.prototype.request = function(pipeName, options) {\n\t\t// jshint unused: false\n\t\tvar wok = this._getPipe(pipeName);\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\tif(this.debug) {\n\t\t\tconsole.debug('Wok requesting '+pipeName+'', args, wok.source);\n\t\t}\n\t\treturn wok.source.apply(this, args);\n\t};\n\n\tWok.plugins = {};\n\n\twindow.Wok = Wok;\n})(window.JSON);"],"sourceRoot":"/source/"}